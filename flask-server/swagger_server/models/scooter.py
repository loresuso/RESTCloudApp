# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Scooter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, license_plate: str=None, latitude: float=None, longitude: float=None, battery_percentage: float=None, status: str=None):  # noqa: E501
        """Scooter - a model defined in Swagger

        :param license_plate: The license_plate of this Scooter.  # noqa: E501
        :type license_plate: str
        :param latitude: The latitude of this Scooter.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this Scooter.  # noqa: E501
        :type longitude: float
        :param battery_percentage: The battery_percentage of this Scooter.  # noqa: E501
        :type battery_percentage: float
        :param status: The status of this Scooter.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'license_plate': str,
            'latitude': float,
            'longitude': float,
            'battery_percentage': float,
            'status': str
        }

        self.attribute_map = {
            'license_plate': 'licensePlate',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'battery_percentage': 'batteryPercentage',
            'status': 'status'
        }

        self._license_plate = license_plate
        self._latitude = latitude
        self._longitude = longitude
        self._battery_percentage = battery_percentage
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Scooter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Scooter of this Scooter.  # noqa: E501
        :rtype: Scooter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_plate(self) -> str:
        """Gets the license_plate of this Scooter.


        :return: The license_plate of this Scooter.
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate: str):
        """Sets the license_plate of this Scooter.


        :param license_plate: The license_plate of this Scooter.
        :type license_plate: str
        """
        if license_plate is None:
            raise ValueError("Invalid value for `license_plate`, must not be `None`")  # noqa: E501

        self._license_plate = license_plate

    @property
    def latitude(self) -> float:
        """Gets the latitude of this Scooter.


        :return: The latitude of this Scooter.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this Scooter.


        :param latitude: The latitude of this Scooter.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this Scooter.


        :return: The longitude of this Scooter.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this Scooter.


        :param longitude: The longitude of this Scooter.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def battery_percentage(self) -> float:
        """Gets the battery_percentage of this Scooter.


        :return: The battery_percentage of this Scooter.
        :rtype: float
        """
        return self._battery_percentage

    @battery_percentage.setter
    def battery_percentage(self, battery_percentage: float):
        """Sets the battery_percentage of this Scooter.


        :param battery_percentage: The battery_percentage of this Scooter.
        :type battery_percentage: float
        """
        if battery_percentage is None:
            raise ValueError("Invalid value for `battery_percentage`, must not be `None`")  # noqa: E501

        self._battery_percentage = battery_percentage

    @property
    def status(self) -> str:
        """Gets the status of this Scooter.


        :return: The status of this Scooter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Scooter.


        :param status: The status of this Scooter.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status
